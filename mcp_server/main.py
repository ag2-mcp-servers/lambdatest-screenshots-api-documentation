# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T04:13:30+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBasic

from models import (
    AccessDenied,
    Forbidden,
    Locations,
    OsBrowsers,
    OsDevices,
    Profiles,
    Resolutions,
    ScreenshotDetails,
    ScreenshotNotFound,
    ScreenshotPayload,
    StartScreenshotBadRequest,
    StartScreenshotSuccess,
    StopScreenshotNotFound,
    StopScreenshotSuccess,
    ZippedScreenshotsSuccess,
)

app = MCPProxy(
    title='LambdaTest Screenshots API Documentation',
    version='1.0.1',
    servers=[{'url': 'https://api.lambdatest.com/screenshots/v1'}],
)


@app.post(
    '/#-datamodel-code-generator-#-root-#-special-#',
    description=""" Start Screenshot Test """,
    tags=['screenshot_testing'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def start__screenshot__test(body: ScreenshotPayload):
    """
    Start Screenshot Test
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/devices',
    description=""" Fetch all os devices combinations available on lambdatest platform. """,
    tags=['device_inventory_handling', 'os_browser_combination_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def devices(os: Optional[str] = None):
    """
    Fetch all available device combinations.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/locations',
    description=""" Fetch list of available Geolocations """,
    tags=['geolocation_retrieval'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def locations():
    """
    Fetch Locations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/os-browsers',
    description=""" Fetch all os browsers combinations available on lambdatest platform. """,
    tags=['os_browser_combination_management', 'device_inventory_handling'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def os_browsers(os: Optional[str] = None):
    """
    Fetch all available os-browser combinations.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/profiles',
    description=""" Fetch login profiles """,
    tags=['user_profile_retrieval'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def profiles():
    """
    Fetch login profiles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/resolutions',
    description=""" Fetch all available resolution on different OS """,
    tags=['screen_resolution_details', 'os_browser_combination_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def resolutions():
    """
    Fetch all available resolution on different OS
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/stop/{test_id}',
    description=""" Stop specified screenshot test """,
    tags=['screenshot_testing'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def stop_screenshots_test(test_id: str):
    """
    Stop specified screenshot test
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{test_id}',
    description=""" To fetch specified screenshot details """,
    tags=['screenshot_testing'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def screenshots(test_id: str):
    """
    Fetch specified screenshot details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{test_id}/zip',
    description=""" Fetch Zipped Screenshots """,
    tags=['screenshot_testing'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def zipped_screenshots(test_id: str):
    """
    Fetch Zipped Screenshots
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)

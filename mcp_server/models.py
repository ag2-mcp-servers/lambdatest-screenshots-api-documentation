# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T04:13:30+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class AccessDenied(BaseModel):
    message: Optional[str] = Field(None, examples=['Unauthorized'])


class Forbidden(BaseModel):
    message: Optional[str] = Field(
        None,
        examples=[
            'Screenshot API is supported only in our premium plans. Please upgrade.'
        ],
    )


class Android70(BaseModel):
    devices: Optional[List[str]] = Field(
        None,
        examples=[
            [
                'galaxy j7 max',
                'galaxy s8',
                'galaxy s8+',
                'galaxy tab s3 9.3',
                'huawei honor 6x',
                'nexus 5x',
                'nexus 6p',
                'oppo r9',
            ]
        ],
    )


class Android90(BaseModel):
    devices: Optional[List[str]] = Field(None, examples=[['galaxy s9 plus']])


class Browsers(BaseModel):
    chrome: Optional[List[str]] = Field(None, examples=[['76', '75']])
    firefox: Optional[List[str]] = Field(None, examples=[['67', '66']])
    opera: Optional[List[str]] = Field(None, examples=[['55', '54']])


class Ios120(BaseModel):
    devices: Optional[List[str]] = Field(
        None, examples=[['iphone xr', 'iphone xs', 'iphone xs max']]
    )


class Location(BaseModel):
    code: Optional[str] = Field(None, examples=['US'])
    name: Optional[str] = Field(None, examples=['United States'])


class Locations(BaseModel):
    locations: Optional[List[Location]] = None


class OsBrowsers(BaseModel):
    macos_mojave: Optional[Browsers] = Field(None, alias='macos mojave')
    windows_10: Optional[Browsers] = Field(None, alias='windows 10')


class OsDevices(BaseModel):
    android_7_0: Optional[Android70] = Field(None, alias='android 7.0')
    ios_12_0: Optional[Ios120] = Field(None, alias='ios 12.0')


class Credentials(BaseModel):
    password: Optional[str] = Field(None, examples=['password'])
    username: Optional[str] = Field(None, examples=['name'])


class Password(BaseModel):
    type: Optional[str] = Field(None, examples=['name'])
    value: Optional[str] = Field(None, examples=['password'])


class Submit(BaseModel):
    type: Optional[str] = Field(None, examples=['css'])
    value: Optional[str] = Field(None, examples=['button.btn-lg'])


class Username(BaseModel):
    type: Optional[str] = Field(None, examples=['name'])
    value: Optional[str] = Field(None, examples=['email'])


class Locators(BaseModel):
    password: Optional[Password] = None
    submit: Optional[Submit] = None
    username: Optional[Username] = None


class ProfileConfig(BaseModel):
    credentials: Optional[Credentials] = None
    locators: Optional[Locators] = None
    login_url: Optional[str] = Field(
        None, examples=['https://accounts.lambdatest.com/login']
    )
    profile_name: Optional[str] = Field(None, examples=['lambda-login'])


class Profile(BaseModel):
    name: Optional[str] = Field(None, examples=['lambda-login'])
    profile_config: Optional[ProfileConfig] = None


class Profiles(BaseModel):
    profiles: Optional[List[Profile]] = None


class ResList(RootModel[List[str]]):
    root: List[str] = Field(..., examples=[['1024x768', '1280x1024']])


class Resolutions(BaseModel):
    mac_res: Optional[ResList] = None
    win_res: Optional[ResList] = None


class ScreenshotNotFound(BaseModel):
    message: Optional[str] = Field(None, examples=['No data found'])
    reason: Optional[str] = Field(None, examples=['test_id is invalid'])


class Configs(BaseModel):
    macos_mojave: Optional[Browsers] = Field(None, alias='macos mojave')
    windows_10: Optional[Browsers] = Field(None, alias='windows 10')


class ScreenshotPayload(BaseModel):
    callback_url: Optional[str] = Field(None, examples=['https://www.example.com'])
    configs: Optional[Configs] = None
    defer_time: Optional[float] = Field(None, examples=[5])
    email: Optional[bool] = Field(None, examples=[True])
    mac_res: Optional[str] = Field(None, examples=['1024x768'])
    password: Optional[str] = Field(None, examples=['password'])
    tunnel: Optional[bool] = Field(None, examples=[True])
    tunnel_identifier: Optional[str] = Field(None, examples=['tunnel'])
    url: Optional[str] = Field(None, examples=['https://www.lambdatest.com'])
    username: Optional[str] = Field(None, examples=['admin'])
    win_res: Optional[str] = Field(None, examples=['1366X768'])


class ScreenshotType(BaseModel):
    activity_id: Optional[str] = Field(None, examples=['ACT100968331562237283340194'])
    browser: Optional[str] = Field(None, examples=['chrome'])
    browser_version: Optional[str] = Field(None, examples=['76'])
    os: Optional[str] = Field(None, examples=['windows 10'])
    resolution: Optional[str] = Field(None, examples=['1024x768'])
    screenshot_url: Optional[str] = Field(
        None,
        examples=[
            'https://s3.amazonaws.com/s3-screenshots/prod/ACT100968331562237283340194/screenshot/win-cr-76.0.png'
        ],
    )
    status: Optional[str] = Field(None, examples=['completed'])
    thumbnail_url: Optional[str] = Field(
        None,
        examples=[
            'https://s3.amazonaws.com/s3-screenshots/prod/ACT100968331562237283340194/screenshot/win-cr-76.0.png'
        ],
    )


class StartScreenshotBadRequest(BaseModel):
    message: Optional[str] = Field(
        None,
        examples=[
            "The os, browser, browser_version combination is either unsupported or doesn't exist. Please try again with a different combination."
        ],
    )


class StartScreenshotSuccess(BaseModel):
    test_id: Optional[str] = Field(None, examples=['TES100968331562243938913767'])


class StopScreenshotNotFound(BaseModel):
    message: Optional[str] = Field(
        None, examples=['No active Screenshot test found for this test_id']
    )


class StopScreenshotSuccess(BaseModel):
    message: Optional[str] = Field(None, examples=['Test stopped successfully'])


class ZippedScreenshotsSuccess(BaseModel):
    url: Optional[str] = Field(
        None,
        examples=[
            'https://s3-screenshots.s3.amazonaws.com/screenshots/TES1009632231568637527345629.zip'
        ],
    )


class ScreenshotTestResponse(BaseModel):
    callback_url: Optional[str] = Field(None, examples=['https://www.example.com'])
    defer_time: Optional[float] = Field(None, examples=[5])
    screenshots: Optional[List[ScreenshotType]] = None
    test_id: Optional[str] = Field(None, examples=['TES100968331562237283314836'])
    test_status: Optional[str] = Field(None, examples=['completed'])
    url: Optional[str] = Field(None, examples=['https://www.lambdatest.com'])


class ScreenshotDetails(RootModel[ScreenshotTestResponse]):
    root: ScreenshotTestResponse
